#include <iostream>
using namespace std;

int a[10] = {13,27,19,2,8,12,2,8,30,89};
int b[10];

int main()
{
    int size = sizeof(a)/ sizeof(int);                //算出数组里元素的个数
    void MergeSort(int[10],int, int,int[10]);         //先声明再调用
    MergeSort(a,0,size-1,b);
    for (int i = 0; i <size ; ++i)
        cout << a[i] << ",";                          //这里的“，”个数与元素数一致，所以输出时最后一个数后面也带有一个“，”
    cout << endl;
    return 0;
}

void  Merge(int a[],int s,int m,int e, int tmp[])
{
    int pb = 0;                                        //用来存放临时排序数组tmp[]的指针
    int p1 = s,p2 = m+1;                               //两个指针分别指向两组数的开头
    while (p1<=m && p2 <=e)                            //当两组都还没走完时
    {
        if(a[p1]<a[p2])                                //比较两组的，小的给tmp[]数组中
            tmp[pb++]=a[p1++];
        else
            tmp[pb++]=a[p2++];
    }
    while (p1<=m)                                      //最后一个剩第一组没走完，直接把第一组最后一个数放在最后
        tmp[pb++] = a[p1++];

    while(p2<=e)
        tmp[pb++] = a[p2++];

    for (int i = 0; i <e-s+1 ; ++i)                    //把临时排序好在tmp[]数组中的数组重新放回a[]数组中
    {
        a[s+i]=tmp[i];
    }
}

void MergeSort(int a[], int s, int e,int tmp[])
{
    if(s<e)                                            //若s＝e，说明只有一个元素需要排序，直接返回该元素
    {
        int m = s+(e-s)/2;                             //m为数组元素的中间元素个数
        MergeSort(a,s,m,tmp);                          //分别对分成的两组数组进行排序
        MergeSort(a,m+1,e,tmp);
        Merge(a,s,m,e,tmp);                            //合并两组排序好的数组
    }
}



